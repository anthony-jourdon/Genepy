import numpy as np
#import utils
from . import utils

import matplotlib.pyplot as plt

class InitialConditions:
  def __init__(self,Domain) -> None:
    self.domain = Domain
    return
  
  def symbolic_gaussian(self,A,a,b,c,x0,z0):
    wz = utils.gaussian_2d(A,a,b,c,self.domain.sym_coor[0],x0,self.domain.sym_coor[1],z0)
    return wz
  
  def numerical_gaussian(self,A,a,b,c,x0,z0):
    wz = utils.gaussian_2d(A,a,b,c,self.domain.num_coor[0],x0,self.domain.num_coor[1],z0)
    return wz
  
  def rotate_gaussian(self,A,a,b,c,x0,z0):
    x0,z0 = self.domain.rotate_referential(x0,z0,ccw=True)
    print(f'Gaussian centre = {x0,z0}')
    wz_sym = self.symbolic_gaussian(A,a,b,c,x0,z0)
    wz_num = self.numerical_gaussian(A,a,b,c,x0,z0)
    return wz_sym,wz_num

  def evaluate_gaussians(self,A,a,b,c,x0:np.ndarray,z0:np.ndarray):
    nwz = x0.shape[0]
    wz_sym = np.zeros(shape=(nwz), dtype=object)
    wz_num = np.zeros(shape=(nwz,self.domain.num_coor[0].shape[0],self.domain.num_coor[0].shape[1]), dtype=np.float64)

    print("********** Before rotation **********")
    for n in range(nwz):
      wz_sym[n] = self.symbolic_gaussian(A,a,b,c,x0[n],z0[n])
      wz_num[n,:,:] = self.numerical_gaussian(A,a,b,c,x0[n],z0[n])
      print(f"Gaussian[{n}] = {wz_sym[n]}")
    fig,ax = plt.subplots(2,1)
    self.plot_gaussian(ax[0],wz_num)

    print("********** After rotation **********")
    for n in range(nwz):
      wz_sym[n],wz_num[n,:,:] = self.rotate_gaussian(A,a,b,c,x0[n],z0[n])
      print(f"Gaussian[{n}] = {wz_sym[n]}")
    self.plot_gaussian(ax[1],wz_num)
    return wz_sym,wz_num
  
  def plot_gaussian(self,ax,wz_num):
    #from sctriangulate.colors import build_custom_continuous_cmap
    #plastic_cmap = build_custom_continuous_cmap([212, 232, 250], [205, 228, 248], [199, 224, 247], [192, 221, 245], [187, 218, 244], [183, 215, 242], [179, 212, 241], [174, 209, 240], [169, 207, 239], [164, 204, 238], [159, 201, 237], [154, 199, 236], [149, 196, 236], [144, 193, 235], [139, 191, 234], [134, 189, 233], [130, 187, 232], [125, 185, 232], [120, 182, 231], [116, 180, 230], [111, 178, 228], [107, 175, 227], [103, 173, 225], [99, 170, 223], [94, 168, 222], [90, 165, 220], [86, 163, 218], [82, 160, 217], [78, 157, 215], [74, 154, 214], [70, 151, 212], [66, 148, 210], [63, 146, 209], [60, 144, 207], [57, 142, 206], [55, 140, 204], [52, 138, 203], [49, 136, 201], [47, 134, 199], [44, 131, 197], [41, 128, 194], [38, 125, 191], [37, 122, 189], [36, 120, 187], [35, 118, 185], [34, 116, 183], [33, 114, 181], [31, 113, 180], [30, 112, 179], [29, 111, 178], [27, 110, 177], [26, 109, 176], [25, 107, 173], [24, 104, 170], [24, 102, 167], [23, 101, 165], [23, 100, 163], [22, 98, 161], [22, 96, 159], [21, 93, 157], [19, 92, 155], [18, 90, 153], [18, 88, 150], [17, 86, 147], [17, 84, 144], [18, 82, 142], [19, 80, 139], [20, 79, 136], [21, 79, 133], [22, 78, 130], [23, 76, 126], [24, 74, 123], [24, 73, 120], [25, 72, 118], [26, 71, 115], [27, 70, 111], [28, 69, 107], [28, 68, 103], [29, 67, 100], [29, 66, 97], [29, 65, 94], [29, 64, 91], [29, 65, 88], [28, 66, 85], [28, 68, 82], [28, 71, 77], [27, 75, 71], [27, 77, 66], [25, 78, 64], [24, 79, 62], [23, 80, 61], [22, 81, 59], [21, 82, 58], [20, 84, 57], [19, 86, 56], [19, 88, 55], [18, 90, 55], [18, 92, 54], [18, 94, 54], [17, 96, 55], [17, 98, 53], [16, 100, 49], [16, 102, 45], [16, 103, 44], [17, 104, 42], [17, 104, 41], [18, 105, 40], [18, 106, 39], [19, 107, 37], [19, 107, 36], [20, 108, 35], [20, 109, 34], [21, 110, 33], [21, 111, 32], [22, 111, 31], [22, 112, 30], [24, 114, 30], [25, 115, 30], [27, 116, 30], [28, 117, 30], [29, 119, 30], [31, 120, 30], [33, 121, 31], [36, 122, 32], [38, 124, 34], [41, 125, 35], [43, 126, 36], [46, 127, 37], [48, 129, 39], [51, 130, 40], [54, 132, 42], [57, 133, 43], [60, 135, 45], [63, 137, 47], [65, 138, 48], [68, 140, 50], [71, 141, 52], [74, 143, 53], [77, 144, 55], [79, 146, 57], [82, 148, 59], [85, 149, 60], [88, 151, 62], [92, 152, 64], [95, 154, 66], [98, 155, 68], [101, 157, 70], [104, 159, 72], [108, 161, 74], [112, 163, 76], [116, 165, 78], [120, 167, 81], [124, 169, 83], [128, 171, 85], [131, 173, 87], [134, 175, 89], [137, 177, 92], [140, 179, 94], [143, 181, 96], [146, 183, 98], [149, 185, 101], [154, 187, 104], [161, 190, 108], [169, 193, 113], [176, 196, 117], [183, 199, 122], [190, 202, 126], [196, 205, 132], [202, 209, 138], [208, 212, 143], [214, 216, 149], [219, 219, 154], [221, 218, 153], [223, 217, 152], [226, 217, 152], [228, 216, 151], [230, 215, 150], [232, 214, 149], [234, 213, 148], [235, 212, 147], [234, 210, 145], [234, 208, 144], [234, 206, 142], [233, 203, 140], [233, 201, 139], [232, 199, 137], [232, 197, 135], [232, 195, 133], [231, 193, 132], [231, 191, 130], [230, 189, 128], [230, 187, 126], [229, 184, 124], [228, 181, 122], [228, 178, 120], [227, 175, 118], [226, 172, 116], [225, 169, 114], [224, 166, 112], [223, 164, 110], [222, 161, 107], [222, 158, 105], [221, 155, 103], [220, 152, 101], [219, 149, 99], [218, 146, 98], [217, 143, 96], [215, 140, 95], [214, 137, 94], [213, 134, 92], [212, 132, 91], [211, 129, 90], [210, 126, 88], [208, 123, 87], [207, 120, 86], [206, 117, 84], [205, 114, 83], [203, 111, 81], [201, 108, 79], [199, 106, 77], [196, 103, 74], [194, 100, 72], [191, 97, 70], [189, 94, 67], [186, 92, 65], [184, 89, 63], [182, 86, 60], [179, 83, 58], [177, 80, 56], [174, 77, 53], [172, 75, 51], [169, 72, 49], [167, 70, 47], [164, 67, 45], [161, 64, 44], [159, 62, 42], [156, 59, 40], [154, 57, 38], [151, 54, 36], [148, 51, 34], [146, 49, 32], [143, 46, 30], [141, 44, 28], [138, 40, 26], [135, 37, 24], [132, 34, 21], [129, 30, 19], [127, 27, 16], [124, 23, 14], [122, 20, 11], [120, 17, 9], [119, 14, 8], [118, 11, 6], [117, 8, 4], [116, 5, 2], [115, 2, 0])

    nwz = wz_num.shape[0]
    field = np.zeros(shape=(self.domain.num_coor[0].shape[0],self.domain.num_coor[0].shape[1]), dtype=np.float64) 
    for n in range(nwz):
      field += wz_num[n,:,:]

    g = ax.contourf(self.domain.num_coor[0],self.domain.num_coor[1],field,100,cmap='jet')
    ax.axis('equal')
    plt.colorbar(g,ax=ax)
    plt.draw()
    return